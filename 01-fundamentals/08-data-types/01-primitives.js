/*
  Topic: primitives.js

  Demonstrates JavaScript primitive data types, focusing on:
    - String, Number, Boolean, Null, Undefined, Symbol, BigInt
    - Immutability and direct value storage
    - Basic usage examples and type checking
*/

// --- 1. String â€” sequence of characters ---

const name = "Sumaya";
console.log("String (name):", name);                 // âœ… "Sumaya"
console.log("Type of name:", typeof name);           // âœ… "string"

// --- 2. Number â€” numeric values (integers and floats) ---

const age = 25;
const pi = 3.1416;
console.log("Number (age):", age);                    // âœ… 25
console.log("Number (pi):", pi);                      // âœ… 3.1416
console.log("Type of age:", typeof age);              // âœ… "number"

// --- 3. Boolean â€” true or false values ---

const isActive = true;
const hasPaid = false;
console.log("Boolean (isActive):", isActive);        // âœ… true
console.log("Boolean (hasPaid):", hasPaid);          // âœ… false
console.log("Type of isActive:", typeof isActive);   // âœ… "boolean"

// --- 4. Null â€” intentional absence of value ---

const emptyValue = null;
console.log("Null (emptyValue):", emptyValue);       // âœ… null
console.log("Type of emptyValue:", typeof emptyValue); // âœ… "object" (historic JS quirk)

// --- 5. Undefined â€” declared but not assigned ---

let notAssigned;
console.log("Undefined (notAssigned):", notAssigned); // âœ… undefined
console.log("Type of notAssigned:", typeof notAssigned); // âœ… "undefined"

// --- 6. Symbol â€” unique identifiers ---

const id = Symbol("id");
console.log("Symbol (id):", id);                      // âœ… Symbol(id)
console.log("Type of id:", typeof id);                // âœ… "symbol"

// --- 7. BigInt â€” large integers beyond Number limits ---

const bigNumber = 9007199254740991n;
console.log("BigInt (bigNumber):", bigNumber);        // âœ… 9007199254740991n
console.log("Type of bigNumber:", typeof bigNumber);  // âœ… "bigint"

// --- 8. Immutability of primitives ---

let greeting = "Hello";
let upperGreeting = greeting.toUpperCase();

console.log("Original string:", greeting);            // âœ… "Hello"
console.log("Uppercase string:", upperGreeting);      // âœ… "HELLO"

greeting[0] = "h";  // Attempt to change first character (ignored)
console.log("After mutation attempt:", greeting);     // âœ… "Hello"

/*
  ðŸ”— Notes:
  - Primitive types store actual values directly in variables.
  - Primitives are immutable â€” operations create new values, original stays unchanged.
  - typeof operator returns the data type string.
  - Null type quirk: typeof null === "object".
  - Symbols are unique and useful for unique identifiers.
  - BigInt allows safe handling of very large integers.
  - See type-checking.js for detailed type tests.
*/
